<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bazinga.replay.dao.BigOrderLastPriceTimeDAO">

    <resultMap id="BaseResultMap" type="com.bazinga.replay.model.BigOrderLastPriceTime">
        <id column="id" jdbcType="BIGINT"  property="id" />
        <result column="stock_code" jdbcType="VARCHAR" property="stockCode"/>
        <result column="stock_name" jdbcType="VARCHAR" property="stockName"/>
        <result column="trade_date" jdbcType="VARCHAR" property="tradeDate"/>
        <result column="unique_key" jdbcType="VARCHAR" property="uniqueKey"/>
        <result column="limit_up_price" jdbcType="DECIMAL" property="limitUpPrice"/>
        <result column="first_sell_trade_sell_no" jdbcType="VARCHAR" property="firstSellTradeSellNo"/>
        <result column="first_sell_trade_buy_no" jdbcType="VARCHAR" property="firstSellTradeBuyNo"/>
        <result column="sell_time_trade" jdbcType="VARCHAR" property="sellTimeTrade"/>
        <result column="time_trade" jdbcType="VARCHAR" property="timeTrade"/>
        <result column="trade_buy_no" jdbcType="VARCHAR" property="tradeBuyNo"/>
        <result column="trade_price" jdbcType="DECIMAL" property="tradePrice"/>
        <result column="trade_volume" jdbcType="BIGINT" property="tradeVolume"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>


    <sql id="Base_Column_List">
        id,
            stock_code,
            stock_name,
            trade_date,
            unique_key,
            limit_up_price,
            first_sell_trade_sell_no,
            first_sell_trade_buy_no,
            sell_time_trade,
            time_trade,
            trade_buy_no,
            trade_price,
            trade_volume,
            create_time,
            update_time
        </sql>


    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from big_order_last_price_time
        where id = #{id}
    </select>


    <select id="selectByUniqueKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from big_order_last_price_time
        where unique_key = #{uniqueKey} limit 1
    </select>

    <update id="updateByUniqueKey" parameterType="com.bazinga.replay.model.BigOrderLastPriceTime">
        update big_order_last_price_time
        <set>
        <if test="stockCode != null">
            stock_code = #{stockCode, jdbcType=VARCHAR},
        </if>
        <if test="stockName != null">
            stock_name = #{stockName, jdbcType=VARCHAR},
        </if>
        <if test="tradeDate != null">
            trade_date = #{tradeDate, jdbcType=VARCHAR},
        </if>
        <if test="limitUpPrice != null">
            limit_up_price = #{limitUpPrice, jdbcType=DECIMAL},
        </if>
        <if test="firstSellTradeSellNo != null">
            first_sell_trade_sell_no = #{firstSellTradeSellNo, jdbcType=VARCHAR},
        </if>
        <if test="firstSellTradeBuyNo != null">
            first_sell_trade_buy_no = #{firstSellTradeBuyNo, jdbcType=VARCHAR},
        </if>
        <if test="sellTimeTrade != null">
            sell_time_trade = #{sellTimeTrade, jdbcType=VARCHAR},
        </if>
        <if test="timeTrade != null">
            time_trade = #{timeTrade, jdbcType=VARCHAR},
        </if>
        <if test="tradeBuyNo != null">
            trade_buy_no = #{tradeBuyNo, jdbcType=VARCHAR},
        </if>
        <if test="tradePrice != null">
            trade_price = #{tradePrice, jdbcType=DECIMAL},
        </if>
        <if test="tradeVolume != null">
            trade_volume = #{tradeVolume, jdbcType=BIGINT},
        </if>
        <if test="createTime != null">
            create_time = #{createTime, jdbcType=TIMESTAMP},
        </if>
        <if test="updateTime != null">
            update_time = #{updateTime, jdbcType=TIMESTAMP},
        </if>
        </set>
        where unique_key = #{uniqueKey} limit 1
    </update>
    <insert id="insert" parameterType="com.bazinga.replay.model.BigOrderLastPriceTime" useGeneratedKeys="true" keyProperty="id">
        insert into big_order_last_price_time (<include refid="Base_Column_List" />)
        values(
        #{id, jdbcType=BIGINT},
            #{stockCode, jdbcType=VARCHAR},
            #{stockName, jdbcType=VARCHAR},
            #{tradeDate, jdbcType=VARCHAR},
            #{uniqueKey, jdbcType=VARCHAR},
            #{limitUpPrice, jdbcType=DECIMAL},
            #{firstSellTradeSellNo, jdbcType=VARCHAR},
            #{firstSellTradeBuyNo, jdbcType=VARCHAR},
            #{sellTimeTrade, jdbcType=VARCHAR},
            #{timeTrade, jdbcType=VARCHAR},
            #{tradeBuyNo, jdbcType=VARCHAR},
            #{tradePrice, jdbcType=DECIMAL},
            #{tradeVolume, jdbcType=BIGINT},
            #{createTime, jdbcType=TIMESTAMP},
            #{updateTime, jdbcType=TIMESTAMP}
            )
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.bazinga.replay.model.BigOrderLastPriceTime">
        update big_order_last_price_time
        <set>
            <if test="stockCode != null">
                stock_code = #{stockCode, jdbcType=VARCHAR},
            </if>
            <if test="stockName != null">
                stock_name = #{stockName, jdbcType=VARCHAR},
            </if>
            <if test="tradeDate != null">
                trade_date = #{tradeDate, jdbcType=VARCHAR},
            </if>
            <if test="uniqueKey != null">
                unique_key = #{uniqueKey, jdbcType=VARCHAR},
            </if>
            <if test="limitUpPrice != null">
                limit_up_price = #{limitUpPrice, jdbcType=DECIMAL},
            </if>
            <if test="firstSellTradeSellNo != null">
                first_sell_trade_sell_no = #{firstSellTradeSellNo, jdbcType=VARCHAR},
            </if>
            <if test="firstSellTradeBuyNo != null">
                first_sell_trade_buy_no = #{firstSellTradeBuyNo, jdbcType=VARCHAR},
            </if>
            <if test="sellTimeTrade != null">
                sell_time_trade = #{sellTimeTrade, jdbcType=VARCHAR},
            </if>
            <if test="timeTrade != null">
                time_trade = #{timeTrade, jdbcType=VARCHAR},
            </if>
            <if test="tradeBuyNo != null">
                trade_buy_no = #{tradeBuyNo, jdbcType=VARCHAR},
            </if>
            <if test="tradePrice != null">
                trade_price = #{tradePrice, jdbcType=DECIMAL},
            </if>
            <if test="tradeVolume != null">
                trade_volume = #{tradeVolume, jdbcType=BIGINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime, jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime, jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id} limit 1
    </update>

    <sql id="Equal_Where_List">
        <if test="stockCode != null">
            and stock_code = #{stockCode, jdbcType=VARCHAR}
        </if>
        <if test="stockName != null">
            and stock_name = #{stockName, jdbcType=VARCHAR}
        </if>
        <if test="tradeDate != null">
            and trade_date = #{tradeDate, jdbcType=VARCHAR}
        </if>
        <if test="uniqueKey != null">
            and unique_key = #{uniqueKey, jdbcType=VARCHAR}
        </if>
        <if test="limitUpPrice != null">
            and limit_up_price = #{limitUpPrice, jdbcType=DECIMAL}
        </if>
        <if test="firstSellTradeSellNo != null">
            and first_sell_trade_sell_no = #{firstSellTradeSellNo, jdbcType=VARCHAR}
        </if>
        <if test="firstSellTradeBuyNo != null">
            and first_sell_trade_buy_no = #{firstSellTradeBuyNo, jdbcType=VARCHAR}
        </if>
        <if test="sellTimeTrade != null">
            and sell_time_trade = #{sellTimeTrade, jdbcType=VARCHAR}
        </if>
        <if test="timeTrade != null">
            and time_trade = #{timeTrade, jdbcType=VARCHAR}
        </if>
        <if test="tradeBuyNo != null">
            and trade_buy_no = #{tradeBuyNo, jdbcType=VARCHAR}
        </if>
        <if test="tradePrice != null">
            and trade_price = #{tradePrice, jdbcType=DECIMAL}
        </if>
        <if test="tradeVolume != null">
            and trade_volume = #{tradeVolume, jdbcType=BIGINT}
        </if>
    </sql>

    <sql id="Range_Where_List">
        <if test="createTimeFrom != null">
            <![CDATA[
            and create_time >= #{createTimeFrom, jdbcType=TIMESTAMP}
            ]]>
        </if>
        <if test="createTimeTo != null">
            <![CDATA[
            and create_time <= #{createTimeTo, jdbcType=TIMESTAMP}
            ]]>
        </if>
        <if test="updateTimeFrom != null">
            <![CDATA[
            and update_time >= #{updateTimeFrom, jdbcType=TIMESTAMP}
            ]]>
        </if>
        <if test="updateTimeTo != null">
            <![CDATA[
            and update_time <= #{updateTimeTo, jdbcType=TIMESTAMP}
            ]]>
        </if>
    </sql>

    <sql id="GtLastMaxId_Where">
        <if test="lastMaxId != null and lastMaxId > 0">
            and id > #{lastMaxId}
        </if>
    </sql>

    <sql id="Order_By">
        <if test="sorts != null and sorts.size > 0">
            ORDER BY
            <foreach collection="sorts" item="sortItem" separator=",">
                ${sortItem.column} ${sortItem.type.message}
            </foreach>
        </if>
    </sql>

    <select id="selectByCondition" parameterType="com.bazinga.replay.query.BigOrderLastPriceTimeQuery" resultMap="BaseResultMap">
        select
            <include refid="Base_Column_List"/>
        from big_order_last_price_time
        <where>
            <include refid="Equal_Where_List"/>
            <include refid="Range_Where_List"/>
            <include refid="GtLastMaxId_Where" />
        </where>
        <include refid="Order_By"/>
        <if test="limit > 0">
            limit #{offset}, #{limit}
        </if>
    </select>

    <select id="countByCondition" parameterType="com.bazinga.replay.query.BigOrderLastPriceTimeQuery" resultType="java.lang.Integer">
        select count(1)
        from big_order_last_price_time
        <where>
            <include refid="Equal_Where_List"/>
            <include refid="Range_Where_List"/>
        </where>
    </select>


</mapper>