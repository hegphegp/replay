<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bazinga.replay.dao.ThsPriceTrendDAO">

    <resultMap id="BaseResultMap" type="com.bazinga.replay.model.ThsPriceTrend">
        <id column="id" jdbcType="BIGINT"  property="id" />
        <result column="node_id" jdbcType="VARCHAR" property="nodeId"/>
        <result column="node_name" jdbcType="VARCHAR" property="nodeName"/>
        <result column="industry" jdbcType="VARCHAR" property="industry"/>
        <result column="country" jdbcType="VARCHAR" property="country"/>
        <result column="index_name" jdbcType="VARCHAR" property="indexName"/>
        <result column="index_unit" jdbcType="VARCHAR" property="indexUnit"/>
        <result column="index_id" jdbcType="VARCHAR" property="indexId"/>
        <result column="from_source" jdbcType="VARCHAR" property="fromSource"/>
        <result column="date_str" jdbcType="VARCHAR" property="dateStr"/>
        <result column="val" jdbcType="DECIMAL" property="val"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>


    <sql id="Base_Column_List">
        id,
            node_id,
            node_name,
            industry,
            country,
            index_name,
            index_unit,
            index_id,
            from_source,
            date_str,
            val,
            create_time,
            update_time
        </sql>


    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from ths_price_trend
        where id = #{id}
    </select>


    <insert id="insert" parameterType="com.bazinga.replay.model.ThsPriceTrend" useGeneratedKeys="true" keyProperty="id">
        insert into ths_price_trend (<include refid="Base_Column_List" />)
        values(
        #{id, jdbcType=BIGINT},
            #{nodeId, jdbcType=VARCHAR},
            #{nodeName, jdbcType=VARCHAR},
            #{industry, jdbcType=VARCHAR},
            #{country, jdbcType=VARCHAR},
            #{indexName, jdbcType=VARCHAR},
            #{indexUnit, jdbcType=VARCHAR},
            #{indexId, jdbcType=VARCHAR},
            #{fromSource, jdbcType=VARCHAR},
            #{dateStr, jdbcType=VARCHAR},
            #{val, jdbcType=DECIMAL},
            #{createTime, jdbcType=TIMESTAMP},
            #{updateTime, jdbcType=TIMESTAMP}
            )
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.bazinga.replay.model.ThsPriceTrend">
        update ths_price_trend
        <set>
            <if test="nodeId != null">
                node_id = #{nodeId, jdbcType=VARCHAR},
            </if>
            <if test="nodeName != null">
                node_name = #{nodeName, jdbcType=VARCHAR},
            </if>
            <if test="industry != null">
                industry = #{industry, jdbcType=VARCHAR},
            </if>
            <if test="country != null">
                country = #{country, jdbcType=VARCHAR},
            </if>
            <if test="indexName != null">
                index_name = #{indexName, jdbcType=VARCHAR},
            </if>
            <if test="indexUnit != null">
                index_unit = #{indexUnit, jdbcType=VARCHAR},
            </if>
            <if test="indexId != null">
                index_id = #{indexId, jdbcType=VARCHAR},
            </if>
            <if test="fromSource != null">
                from_source = #{fromSource, jdbcType=VARCHAR},
            </if>
            <if test="dateStr != null">
                date_str = #{dateStr, jdbcType=VARCHAR},
            </if>
            <if test="val != null">
                val = #{val, jdbcType=DECIMAL},
            </if>
            <if test="createTime != null">
                create_time = #{createTime, jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime, jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id} limit 1
    </update>

    <sql id="Equal_Where_List">
        <if test="nodeId != null">
            and node_id = #{nodeId, jdbcType=VARCHAR}
        </if>
        <if test="nodeName != null">
            and node_name = #{nodeName, jdbcType=VARCHAR}
        </if>
        <if test="industry != null">
            and industry = #{industry, jdbcType=VARCHAR}
        </if>
        <if test="country != null">
            and country = #{country, jdbcType=VARCHAR}
        </if>
        <if test="indexName != null">
            and index_name = #{indexName, jdbcType=VARCHAR}
        </if>
        <if test="indexUnit != null">
            and index_unit = #{indexUnit, jdbcType=VARCHAR}
        </if>
        <if test="indexId != null">
            and index_id = #{indexId, jdbcType=VARCHAR}
        </if>
        <if test="fromSource != null">
            and from_source = #{fromSource, jdbcType=VARCHAR}
        </if>
        <if test="dateStr != null">
            and date_str = #{dateStr, jdbcType=VARCHAR}
        </if>
        <if test="val != null">
            and val = #{val, jdbcType=DECIMAL}
        </if>
    </sql>

    <sql id="Range_Where_List">
        <if test="createTimeFrom != null">
            <![CDATA[
            and create_time >= #{createTimeFrom, jdbcType=TIMESTAMP}
            ]]>
        </if>
        <if test="createTimeTo != null">
            <![CDATA[
            and create_time <= #{createTimeTo, jdbcType=TIMESTAMP}
            ]]>
        </if>
        <if test="updateTimeFrom != null">
            <![CDATA[
            and update_time >= #{updateTimeFrom, jdbcType=TIMESTAMP}
            ]]>
        </if>
        <if test="updateTimeTo != null">
            <![CDATA[
            and update_time <= #{updateTimeTo, jdbcType=TIMESTAMP}
            ]]>
        </if>
    </sql>

    <sql id="GtLastMaxId_Where">
        <if test="lastMaxId != null and lastMaxId > 0">
            and id > #{lastMaxId}
        </if>
    </sql>

    <sql id="Order_By">
        <if test="sorts != null and sorts.size > 0">
            ORDER BY
            <foreach collection="sorts" item="sortItem" separator=",">
                ${sortItem.column} ${sortItem.type.message}
            </foreach>
        </if>
    </sql>

    <select id="selectByCondition" parameterType="com.bazinga.replay.query.ThsPriceTrendQuery" resultMap="BaseResultMap">
        select
            <include refid="Base_Column_List"/>
        from ths_price_trend
        <where>
            <include refid="Equal_Where_List"/>
            <include refid="Range_Where_List"/>
            <include refid="GtLastMaxId_Where" />
        </where>
        <include refid="Order_By"/>
        <if test="limit > 0">
            limit #{offset}, #{limit}
        </if>
    </select>

    <select id="countByCondition" parameterType="com.bazinga.replay.query.ThsPriceTrendQuery" resultType="java.lang.Integer">
        select count(1)
        from ths_price_trend
        <where>
            <include refid="Equal_Where_List"/>
            <include refid="Range_Where_List"/>
        </where>
    </select>


</mapper>